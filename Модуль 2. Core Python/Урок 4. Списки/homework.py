# Тема: Список, срезы списков.

# Упражнение 1: Управление списком покупок
# Создайте список покупок, содержащий элементы "bread", "milk", "eggs".
food = ["bread", "milk", "eggs"]
# Измените элемент "milk" на "almond milk".
food[1] = "almond milk"
print(food)
# Создайте срез, содержащий первые два элемента списка.
print(food[:2])
# Создайте вложенный список, где каждый элемент списка покупок будет содержать его цену.
price = [
        ["bread", 1.19],
        ["almond milk", 1.25],
        ["eggs", 3.28]
        ]
print(price)
# Выведите список покупок, срез и вложенный список.
# print(shopping_list)  # Ожидаемый результат: ["bread", "almond milk", "eggs"]
# print(slice_shopping_list)  # Ожидаемый результат: ["bread", "almond milk"]
# print(detailed_shopping_list)  # Ожидаемый результат: [["bread", 1.5], ["almond milk", 3.0], ["eggs", 2.0]]


# Упражнение 2: Управление списком студентов и их оценок
# Создайте список студентов, содержащий элементы "Alice", "Bob", "Charlie", "David".
students = ["Alice", "Bob", "Charlie", "David"]
print(students)
# Измените имя второго студента на "Eve".
students[1] = "Eve"
# Создайте срез, содержащий студентов: "Bob", "Charlie".
print(students[1:3])
# Создайте вложенный список, где каждый студент имеет список своих оценок.
students1 = [
            ["Alice", [5,5,5,5]],
            ["Eve", [4,3,3,4]],
            ["Charlie", [5,2,3,1]],
            ["David", [4,2,5,5]]
            ]
print(students1)
# Выведите список студентов, срез и вложенный список.
# print(students)  # Ожидаемый результат: ["Alice", "Eve", "Charlie", "David"]
# print(top_students)  # Ожидаемый результат: ["Bob", "Charlie"]
# print(student_grades)  # Ожидаемый результат:
# [["Alice", [90, 85, 88]], ["Eve", [75, 80, 82]], ["Charlie", [95, 92, 93]], ["David", [78, 85, 84]]]


# Упражнение 3: Управление списком задач
# Создайте список задач, содержащий элементы "task1", "task2", "task3", "task4.
tasks = ["task1", "task2", "task3", "task4"]
# Измените третью задачу на "task3 updated".
tasks[2] = "task3 updated"
print(tasks)
# Создайте срез, содержащий последние две задачи.
print(tasks[2:])
# Создайте вложенный список, где каждая задача имеет свой статус (True - выполнено, False - не выполнено).
tasks_ft = [
           ["task1", True],
           ["task2", False],
           ["task3", True],
           ["task4", False]
           ]
print(tasks_ft)
# Выведите список задач, срез и вложенный список.
# print(tasks)  # Ожидаемый результат: ["task1", "task2", "task3 updated", "task4"]
# print(last_tasks)  # Ожидаемый результат: ["task3", "task4"]
# print(detailed_tasks)  # Ожидаемый результат:
# [["task1", True], ["task2 updated", False], ["task3", True], ["task4", False]]


# Тема: Методы списков

# Упражнение 1: Управление списком фильмов и их рейтингов
# 1.1 Создайте список фильмов, содержащий элементы "Movie1", "Movie2", "Movie3".
movies = ["Movie1", "Movie2", "Movie3"]
# 1.2 Пропишите условие: добавить в список фильм "Movie4", если его еще нет в списке.
if ("Movie4") not in movies:
        movies.append("Movie4")
print(movies)
# 1.3 Пропишите условия: если количество фильмов больше 2, то название второго фильма меняется на "Updated Movie2".
# Если количество фильмов меньше 5, то объедините имеющийся список с новым списком ["Movie5", "Movie6", "Movie7"]
movies1 = ["Movie5", "Movie6", "Movie7"]
if len(movies) > 2:
        movies[1] = "Updated Movie2"
if len(movies) < 5:
        movies.extend(movies1)
print(movies)
# 1.4 Создайте вложенный список, где каждый фильм имеет свой год выпуска и рейтинг:
# ["Movie1", 2010, 8.1], ["Updated Movie2", 2015, 7.5], ["Movie3", 2020, 8.6], ["Movie4", 2021, 7.9],
# ["Movie5", 2013, 8.5], ["Movie6", 2018, 8.6], ["Movie7", 2023, 7.0]
movies_yers = [
              ["Movie1", 2010, 8.1],
              ["Updated Movie2", 2015, 7.5],
              ["Movie3", 2020, 8.6],
              ["Movie4", 2021, 7.9],
              ["Movie5", 2013, 8.5],
              ["Movie6", 2018, 8.6],
              ["Movie7", 2023, 7.0]
]
# 1.5 Добавьте фильм ["Movie", 2002, 7.7] в начало вложенного списка.
movies_yers.insert(0, ["Movie", 2002, 7.7])
print(movies_yers)
# 1.6 Выведите список фильмов и вложенный список.
# print(movie_list)  #  "Movie1", "Movie2", "Movie3", "Movie4", "Movie5", "Movie6", "Movie7"
# print(movie_details)  # Ожидаемый результат: [["Movie", 2002, 7.7], ["Movie1", 2010, 8.1], ["Updated Movie2", 2015, 7.5],
# ["Movie3", 2020, 8.6], ["Movie4", 2021, 7.9], ["Movie5", 2013, 8.5], ["Movie6", 2018, 8.6], ["Movie7", 2023, 7.0]]


# Упражнение 2: Анализ списка курсов и их продолжительности
# 2.1 Создайте список курсов, содержащий элементы "Python", "Java", "JavaScript".
courses = ["Python", "Java", "JavaScript"]
# 2.2 Добавьте в список курс "C++".
courses.append("C++")
# 2.3 Измените название второго курса на "Kotlin".
courses[1] = "Kotlin"
# 2.4 Если первые три курса "Python", "Kotlin", "JavaScript", то создайте срез, содержащий первые три курса.
if courses[:3] == ["Python","Kotlin", "JavaScript"]:
        print(courses[:3])
# 2.5 Отсортируйте курсы по названиям.
courses.sort()
print(courses)
# 2.6 Cоздайте вложенный список, где каждый курс имеет свою продолжительность в часах.
# ["Python", 40], ["Kotlin", 30], ["JavaScript", 35], ["C++", 50]
courses1 = [
        ["Python", 40],
        ["Kotlin", 30],
        ["JavaScript", 35],
        ["C++", 50],
]
print(courses1)
# 2.7 Выполните сложение часов всех курсов во вложенном списке и выведите общую продолжительность всех курсов.
courses_sum = sum([courses1[0][1], courses1[1][1], courses1[2][1], courses1[3][1]])
print(courses_sum)
# 2.8 Выведите в консоль:
# - отсортированный список курсо, # Ожидаемый результат:['C++', 'JavaScript', 'Kotlin', 'Python']
# - срез, # Ожидаемый результат: ['Python', 'Kotlin', 'JavaScript']
# - вложенный список, # Ожидаемый результат: [['Python', 40], ['Kotlin', 30], ['JavaScript', 35], ['C++', 50]]
# - общую продолжительность всех курсов. # Ожидаемый результат: 155


# Мини-проект: Система управления задачами (To-Do List)

# Описание проекта:
# Создайте простую систему управления задачами, которая позволяет пользователям
# добавлять, удалять, и отмечать задачи как выполненные.
#
# Требования:
# 1. Программа должна запрашивать у пользователя ввод задачи. Программа должна преобразовывать введенную пользователем
# задачу в список, где первым элементом идет номер задачи, вторым задача, а третьим статус ее выполнения.
# При создании задачи статус всегда False. Список с задачей добавляется во вложенный список со всеми задачами tasks.
# 2. Программа должна выводить список задач.
# 3. Пользователь должен иметь возможность отметить задачу как выполненную. Для этого программа должна запросить у него
# номер задачи. Если такого номера нет, то вывести сообщение "Некорректный номер задачи.".
# Если номер корректный, то поменять статус задачи на True.
# 4. Пользователь должен иметь возможность удалить задачу. Чтобы удалить задачу, запросите ее номер.
# Если номер корректный, то удалите ее.

# tasks = []
#
# while True:
#     # В решении используется цикл, чтобы программа работала пока вы ее принудительно не завершите через Ctr-C.
#     # Циклы вы еще не проходили и для решения задачи эти знания не нужны. Просто пишите код с отступом, продолжая программу.
#     print("\nСистема управления задачами")
#     print("1. Добавить задачу")
#     print("2. Показать задачи")
#     print("3. Отметить задачу как выполненную")
#     print("4. Удалить задачу")
#     choice = input("Выберите действие, введя его номер: ")
#
#     # Продолжите программу ниже. Код пишите с отсутпом, как принты выше.

print("Система управления задачами")
tasks = [
        [1, "сходить в спортзал", False],
        [2, "завоевать мир", True],
        [3, "исследовать соседнюю галактику", False]
        ]
tasks1 = input("введите задачу")
a = len(tasks)
b = a + 1
inputed_task = [b, tasks1, False]
tasks.append(inputed_task)
print("задача добавлена")
print(tasks)
frage = input("Выберите действие над задачей; \"delete\" чтобы удалить, или \"done\" чтобы отметить как выполненое")
if frage == "delete":
        num = int(input("введите номер задачи которую хотите удалить"))
        if num < 1 or num > len(tasks):
                print("Некорректный номер задачи")
        else:
            tasks.pop(num-1)
            print("задача удалена")
            print(tasks)

elif frage == "done":
        num = int(input("введите номер задачи которую хотите отметить как выполненную"))

        if num < 1 or num > len(tasks):
                print("Некорректный номер задачи")
        else:
            tasks[num-1][2] = True
            print("отмечено как выполнено")
            print(tasks)
else:
        print("неверно введено действие")